// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// generate_vaidya_samples
arma::mat generate_vaidya_samples(const int n, const arma::vec& initial, const arma::mat& A, const arma::vec& b, const double r);
RcppExport SEXP _gausspolytopewalk_generate_vaidya_samples(SEXP nSEXP, SEXP initialSEXP, SEXP ASEXP, SEXP bSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_vaidya_samples(n, initial, A, b, r));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gausspolytopewalk_generate_vaidya_samples", (DL_FUNC) &_gausspolytopewalk_generate_vaidya_samples, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_gausspolytopewalk(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
